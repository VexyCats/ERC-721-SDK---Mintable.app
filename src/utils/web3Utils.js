import Web3 from 'web3';
import { addresses, apiFunctions, apiUrls, batchAddresses, constants } from '../config';
import { addressUtils } from './';

/**
 * Utility to parse and process Web3 calls within the Sdk
 * @exports utils/web3Utils
 */
const web3Utils = {

    /**Loads up the Web3 instance to be used by the Sdk,
     * as part of the instantiation process of the Sdk. 
     * @returns {bool} True if successfully loaded
     */
    loadWeb3 : async function () {
        this.web3 = new Web3 (this.provider);
        if (this.provider.enable) {
            await this.provider.enable();
        }
        this.activeNetwork = await this.web3.eth.net.getId();
        const accounts = await this.web3.eth.getAccounts();
        this.defaultAccount = accounts && accounts[0];
        const address = addresses[this.activeNetwork];
        const batchAddress = batchAddresses[this.activeNetwork];
        if (address) {
            this.generatorContract = await new this.web3.eth.Contract(this.abis[constants.GENERATOR_ABI], address);
        }
        if (batchAddress) {
            this.batchGeneratorContract = await new this.web3.eth.Contract(this.abis[constants.GENERATOR_ABI], batchAddress);
        }
        return true;
    },
    /**Extracts the properties of an Ethereum transaction from the provided object
     * @param {object} args Object containing properties of an ethereum transaction
     * @returns {object} Extracted Ethereum transaction object
     */
    extractTransactionConfig(args) {
        const txConfig = {};
        (args.from) ? txConfig.from = args.from : '';
        (args.gas) ? txConfig.gas = args.gas : '';
        (args.gasPrice) ? txConfig.gasPrice = args.gasPrice : '';
        (args.value) ? txConfig.value = args.value : '';
        return txConfig;
    },
    /**Converts numbers' unit between Ether and Gwei
     * @param {number} value A number value who unit is to be converted
     * @param {bool=} inbound True if conversion is to Eth
     * @returns {number} The converted number
     */
    parseEtherValue: function (value, inbound=false) {
        return inbound ?
            value / constants.ETHER :
            value * constants.ETHER;
    },
    /**Convenience function. Fetches the total number of created contracts by the passed contract details
     * @param {object} abi The Abi object for the Generator contract
     * @param {address} address Address of the generator to be instantiated
     * @returns {number} The total number of contracts generated by the Instantiated generator
     */
    fetchGeneratedCount: async function (abi={}, address) {
        const generator = await new this.web3.eth.Contract(abi, address);
        return (await generator.methods.viewTotal().call()).valueOf();
    },
    /**Generic function to send an ethereum transaction, setting a fixed gasPrice if none is set
     * @param {object} contract Instance of contract to receive the transaction
     * @param {string} method Naame of function to be called on the contract.
     * @param {object} transactionArgs Ethereum transaction configurations
     * @param {...*} args Arguments for the method been called on the contract.
     * @returns {object} Resultant promise of the sent transaction.
     */
    methodTransaction: function (contract, method, { from, gas, gasPrice, value },  ...args) {
        const txConfig = this.extractTransactionConfig({ from, gas, gasPrice, value});
        if (!txConfig.gas) {
            txConfig.gas = 3000000;
        }
        const tx = contract.methods[method](...args).send(txConfig);
        return tx;
    },
    /**Check if an address is provided, from which to send the transaction,
     * otherwise, use the default address on the provider used to instantiate the sdk. 
     * @param {string=} from The address provided with the transaction.
     * @returns {string} Address to send the transaction from.
     */
    resolveFrom: function (from) {
        if (!addressUtils.exists(from)) {
            return this.defaultAccount;
        } else {
            return from;
        }
    },
    /**Check if an address is provided, from which to send the transaction,
     * otherwise, use the default address on the provider used to instantiate the sdk. 
     * @param {object} tx Returned transaction object from making an ethereum transaction
     * @param {tansactionEvents} events Object containing transaction events: 
     */
    setEventListeners: function (tx, {onData, onChanged, onTransactionHash, onReceipt, onConfirmation, onError}={}) {
        if (onError) {
            tx.on('error', onError);
        }
        if (onTransactionHash) {
            tx.once('transactionHash', onTransactionHash);
        }
        if (onReceipt) {
            tx.once('receipt', onReceipt);
        }
        if (onConfirmation) {
            tx.on('confirmation', onConfirmation);
        }
        if (onData) {
            tx.on('data', onData);
        }
        if (onChanged) {
            tx.on('change', onChanged);
        }
    }
}

export default web3Utils;